{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Earth Observation Application Package with Dask (EOAP-Dask)","text":"<p>This repository hosts a collection of Dask-enabled Python modules for processing Earth Observation imagery, primarily focusing on Sentinel-2 data. </p> <p>Designed for scalable and efficient geospatial analysis, it leverages distributed computing using Dask on Kubernetes.</p>"},{"location":"#core-technology-calrissian-cwl-and-dask","title":"Core Technology: Calrissian, CWL and Dask","text":"<p>A central feature of this project is its robust integration with Calrissian, a CWL runner designed for Kubernetes. Our workflows leverage a custom <code>DaskGatewayRequirements</code> CWL extension, allowing tasks to seamlessly utilize Dask clusters managed by Dask Gateway. This setup provides:</p> <ul> <li> <p>Orchestrated Parallelism: CWL workflows define the processing steps, while Calrissian orchestrates their execution across a Dask cluster, efficiently managing resources and task dependencies.</p> </li> <li> <p>Scalability: Dask Gateway dynamically scales the Dask cluster workers on Kubernetes as needed, adapting to the computational demands of large EO datasets.</p> </li> <li> <p>Reproducibility &amp; Portability: CWL ensures workflows are standardized, reproducible, and portable across various compliant execution environments.</p> </li> </ul>"},{"location":"#modules","title":"Modules","text":"<p>This repository currently includes the following processing modules:</p>"},{"location":"#eopf-sentinel-2","title":"eopf-sentinel-2:","text":"<ul> <li> <p>Processes individual Sentinel-2 STAC items.</p> </li> <li> <p>Generates vegetation/water indices and color composites.</p> </li> </ul> <p>More details here</p>"},{"location":"#cloudless-mosaic","title":"cloudless-mosaic:","text":"<ul> <li> <p>Generates monthly median mosaics from Sentinel-2 imagery.</p> </li> <li> <p>Applies cloud filtering and outputs Cloud-Optimized GeoTIFFs (COGs).</p> </li> </ul> <p>More details here</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To dive into the setup, installation, and detailed execution instructions (including Dask worker image preparation and Calrissian usage), please refer to the comprehensive documentation for each module.</p>"},{"location":"calrissian-dask/","title":"Calrissian CWL Extension: DaskGatewayRequirement","text":""},{"location":"calrissian-dask/#overview","title":"Overview","text":"<p>The <code>DaskGatewayRequirement</code> is a custom CWL extension developed for the Calrissian CWL runner, enabling dynamic provisioning of Dask clusters through Dask Gateway on Kubernetes. This extension allows a CommandLineTool to declare runtime needs for distributed processing resources (e.g., cores, memory) via a standard CWL ProcessRequirement.</p> <p>When used in a workflow step, Calrissian will:</p> <ul> <li>Provision a Dask cluster with the specified resource limits.</li> <li>Run the CWL tool with access to this Dask cluster.</li> <li>Shutdown the cluster after tool execution completes.</li> </ul>"},{"location":"calrissian-dask/#schema","title":"Schema","text":"<p>The <code>DaskGatewayRequirement</code> is defined in the following custom schema:</p> <pre><code>$base: https://calrissian-cwl.github.io/schema#\n$namespaces:\n  cwl: \"https://w3id.org/cwl/cwl#\"\n$graph:\n  - $import: https://w3id.org/cwl/CommonWorkflowLanguage.yml\n\n  - name: DaskGatewayRequirement\n    type: record\n    extends: cwl:ProcessRequirement\n    inVocab: false\n    doc: \"Indicates that a process requires a Dask cluster procured via [Dask Gateway](https://gateway.dask.org/) runtime.\"\n    fields:\n      class:\n        type: 'string'\n        doc: \"Always 'DaskGatewayRequirement'\"\n        jsonldPredicate:\n          \"_id\": \"@type\"\n          \"_type\": \"@vocab\"\n      workerCores:\n        type: ['int', 'cwl:Expression']\n        doc: Number of cpu-cores available for a Dask worker.\n      workerCoresLimit:\n        type: ['int', 'cwl:Expression']\n        doc: Maximum number of cpu-cores available for a Dask worker.\n      workerMemory:\n        type: ['string', 'cwl:Expression']\n        doc: Maximum memory (e.g., '4G') per Dask worker.\n      clusterMaxCores:\n        type: ['int', 'cwl:Expression']\n        doc: Cluster-wide core count upper limit.\n      clusterMaxMemory:\n        type: ['string', 'cwl:Expression']\n        doc: Cluster-wide memory upper limit.\n</code></pre>"},{"location":"calrissian-dask/#example-usage-in-commandlinetool","title":"Example Usage in CommandLineTool","text":"<pre><code>cwlVersion: v1.2\n$namespaces:\n  s: https://schema.org/\n  calrissian: https://calrissian-cwl.github.io/schema#\ns:softwareVersion: 1.4.1\nschemas:\n  - http://schema.org/version/9.0/schemaorg-current-http.rdf\n\nclass: CommandLineTool\nid: eopf-sentinel-2\nrequirements:\n  DockerRequirement:\n    dockerPull: ttl.sh/eopf-sentinel-2:2h@sha256:...\n  EnvVarRequirement:\n    envDef: {}\n  calrissian:DaskGatewayRequirement:\n    workerCores: 1\n    workerCoresLimit: 1\n    workerMemory: \"4G\"\n    clusterMaxCore: 5\n    clusterMaxMemory: \"20G\"\nbaseCommand: [\"eopf-sentinel-2-proc\"]\narguments: []\ninputs:\n  item-url:\n    type: string\n    inputBinding:\n      position: 1\n      prefix: \"--item-url\"\noutputs:\n  stac-catalog:\n    type: Directory\n    outputBinding:\n      glob: .\n</code></pre>"},{"location":"calrissian-dask/#runtime-behavior","title":"Runtime Behavior","text":"<p>When Calrissian encounters a <code>DaskGatewayRequirement</code>, the following workflow is triggered:</p> <ul> <li>Cluster Provisioning - Calrissian connects to the Dask Gateway specified by the CLI flag <code>--dask-gateway-url</code> and provisions a Dask cluster matching the requested cores and memory.</li> <li>Tool Execution - The CommandLineTool is launched with environment variables or context pointing to the Dask cluster (e.g., DASK_SCHEDULER_ADDRESS). This allows the tool to use Dask's distributed scheduler as needed.</li> <li>Cluster Teardown - Once execution finishes, Calrissian shuts down the Dask cluster, ensuring efficient resource usage.</li> </ul>"},{"location":"calrissian-dask/#cli-integration","title":"CLI Integration","text":"<p>A new CLI option is introduced in Calrissian to support this functionality:</p> <pre><code>--dask-gateway-url &lt;URL&gt;\n</code></pre> <p>Description:</p> <p>Specifies the base URL of the Dask Gateway (e.g., https://dask-gateway.example.com). This option is optional but required when using DaskGatewayRequirement.</p>"},{"location":"calrissian-dask/#notes","title":"Notes","text":"<p>This extension assumes that the tool being run is compatible with Dask and can use a Dask cluster.</p> <p>The resource requests (workerCores, workerMemory, etc.) can also be dynamic via CWL expressions.</p> <p>Error handling for failed cluster creation or shutdown is included in Calrissian\u2019s internal execution flow.</p>"},{"location":"conclusion/","title":"Conclusion","text":""},{"location":"apps/cloudless-mosaic/","title":"Sentinel-2 Monthly Mosaic Generator","text":"<p>This project generates monthly median mosaics from Sentinel-2 imagery using STAC data sources. It is designed to be a robust and scalable solution for creating cloud-less composite imagery for various Earth observation applications.</p>"},{"location":"apps/cloudless-mosaic/#overview","title":"Overview","text":"<p>The <code>cloudless_mosaic</code> module addresses the challenges of large-scale geospatial processing by combining data handling and distributed computing technologies. It seamlessly integrates:</p> <ul> <li> <p><code>xarray</code>: For efficient handling of multi-dimensional array data, crucial for geospatial rasters.</p> </li> <li> <p><code>dask</code>: To enable parallel and out-of-core computations, allowing processing of datasets larger than available memory.</p> </li> <li> <p><code>zarr</code>: For cloud-native, chunked array storage, optimizing data retrieval and write operations.</p> </li> <li> <p><code>stackstac</code>: To create Dask-backed Xarray DataArrays directly from STAC items, streamlining the data loading process.</p> </li> </ul>"},{"location":"apps/cloudless-mosaic/#key-features-benefits","title":"Key Features &amp; Benefits","text":"<ul> <li> <p>Automated Monthly Mosaics: Generates high-quality, cloud-filtered monthly median mosaics from Sentinel-2 data.</p> </li> <li> <p>Scalable Processing: Leverages Dask for distributed parallel processing, enabling efficient handling of vast Sentinel-2 archives.</p> </li> <li> <p>Cloud-Optimized Outputs: Produces Cloud-Optimized GeoTIFFs (COGs) for efficient storage, streaming, and analysis in cloud environments.</p> </li> <li> <p>Flexible Data Filtering: Supports filtering by time range, area of interest (AOI), specific bands, and maximum cloud cover, allowing tailored mosaic generation.</p> </li> <li> <p>CWL Workflow Integration: Includes a Common Workflow Language (CWL) workflow, enabling automated, reproducible, and portable execution within CWL-compatible runners like Calrissian.</p> </li> </ul>"},{"location":"apps/cloudless-mosaic/#getting-started","title":"Getting Started","text":"<p>To begin using the <code>cloudless_mosaic</code> module, please refer to the Execution Guide for detailed instructions on setting up the distributed cluster environment, running the module via its command-line interface or orchestrating it through CWL workflows.</p>"},{"location":"apps/cloudless-mosaic/cli/","title":"Command-Line Interface (CLI)","text":"<p>The <code>cloudless_mosaic</code> module provides a user-friendly command-line interface (CLI) to configure and run the Sentinel-2 monthly mosaic generation workflow. Built with the <code>click</code> library, the CLI simplifies the execution process and supports various parameters for customized outputs.</p>"},{"location":"apps/cloudless-mosaic/cli/#installation","title":"Installation","text":"<p>To install the <code>cloudless_mosaic</code> application and its command-line entry point, navigate to the module's root directory (cloudless-mosaic/) and run the following commands: <pre><code>cd cloudless-mosaic/\npip install -e .\n</code></pre> The <code>pip install -e .</code> command installs the package in \"editable\" mode, meaning any changes to the source code will be immediately reflected without needing to reinstall.</p>"},{"location":"apps/cloudless-mosaic/cli/#environment-variables","title":"Environment Variables","text":"<p>Before running the CLI, ensure that the <code>DASK_CLUSTER</code> environment variable is set to point to your Dask cluster's address. This is crucial for the application to connect to the distributed processing environment.</p>"},{"location":"apps/cloudless-mosaic/cli/#basic-usage-and-help","title":"Basic Usage and Help","text":"<p>To view the available options and a comprehensive help message for the cloudless-mosaic command, execute: <pre><code>cloudless-mosaic --help\n</code></pre></p> <p>This will output details on how to use the command and all its supported parameters.</p>"},{"location":"apps/cloudless-mosaic/cli/#running-the-monthly-mosaic-generation","title":"Running the Monthly Mosaic Generation","text":"<p>Use the <code>cloudless-mosaic</code> command with the necessary parameters to generate Sentinel-2 monthly median mosaics. Below is an example demonstrating a typical command execution:</p> <pre><code>cloudless-mosaic \\\n    --start-date 2020-10-01 \\\n    --end-date 2020-12-31 \\\n    --aoi -122.27508544921875,47.54687159892238,-121.96128845214844,47.745787772920934 \\\n    --bands nir \\\n    --bands red \\\n    --bands green \\\n    --collection sentinel-2-l2a \\\n    --resolution 100 \\\n    --max-items 1000 \\\n    --max-cloud-cover 25\n</code></pre> <p>Parameter Descriptions:</p> <ul> <li> <p><code>--start-date YYYY-MM-DD</code>: The start date for retrieving Sentinel-2 imagery.</p> </li> <li> <p><code>--end-date YYYY-MM-DD</code>: The end date for retrieving Sentinel-2 imagery.</p> </li> <li> <p><code>--aoi MIN_LON,MIN_LAT,MAX_LON,MAX_LAT</code>: The Area of Interest defined as a bounding box (e.g., -122.27,47.54,-121.96,47.74).</p> </li> <li> <p><code>--bands TEXT</code>: Specifies the Sentinel-2 spectral bands to include in the mosaic (e.g., nir, red, green). Repeat the --bands flag for each desired band.</p> </li> <li> <p><code>--collection TEXT</code>: The Sentinel-2 collection to query (e.g., sentinel-2-l1c or sentinel-2-l2a).</p> </li> <li> <p><code>--resolution INTEGER</code>: The spatial resolution of the output mosaic in meters.</p> </li> <li> <p><code>--max-items INTEGER</code>: The maximum number of STAC items (individual Sentinel-2 scenes) to consider for mosaic generation within the specified AOI and time range.</p> </li> <li> <p><code>--max-cloud-cover INTEGER</code>: The maximum acceptable cloud cover percentage for Sentinel-2 scenes to be included in the mosaic. Scenes exceeding this threshold will be filtered out.</p> </li> </ul>"},{"location":"apps/cloudless-mosaic/execute/","title":"Execution Guide","text":"<p>This guide details how to execute the Sentinel-2 Monthly Mosaic Generator module, leveraging Dask for parallel processing in a distributed cluster environment and Calrissian for CWL workflow orchestration.</p>"},{"location":"apps/cloudless-mosaic/execute/#distributed-cluster-setup","title":"Distributed Cluster Setup","text":"<p>To enable parallel processing with Dask, a Dask Gateway object is required to create a Dask Cluster.</p>"},{"location":"apps/cloudless-mosaic/execute/#prerequisites","title":"Prerequisites:","text":"<ul> <li> <p>Dask Gateway Deployment: It is assumed that a Dask Gateway is already deployed and accessible. The dev-platform-eoap repository provides a streamlined method for deploying Dask Gateway on Kubernetes, which can then be integrated with a Code-Server for module execution.</p> </li> <li> <p>Dask Cluster Environment Variable: Ensure the <code>DASK_CLUSTER</code> environment variable is set to point to your Dask cluster. For example: <pre><code>export DASK_CLUSTER=eoap-dask-gateway.600b64a112eb404888df41006e19666f\n</code></pre></p> </li> <li> <p>Dask Worker Image: For Dask to utilize your module's dependencies and code, a custom Docker image for the Dask workers must be built and made accessible to the Kubernetes cluster. This image should contain all the necessary Python packages and your module's code.</p> </li> <li> <p>Building and Providing the Worker Image:   The easiest way to build the worker image for this module is to navigate into the <code>cloudless-mosaic/</code> directory (where the Dockerfile for  the worker is located) and run a Docker build command:     <pre><code>cd cloudless-mosaic/\ndocker build -t cloudless-mosaic-worker:latest .\n</code></pre>     Once built, this image needs to be available to your Kubernetes cluster.</p> </li> <li> <p>Using ttl.sh for Temporary Images: For development or testing, ttl.sh provides an anonymous, ephemeral registry. This allows you to   quickly build and push a temporary, pullable image without authentication, which expires after a set duration (e.g., 1 hour).     <pre><code>IMAGE_NAME=cloudless-mosaic-worker\ndocker build -t ttl.sh/${IMAGE_NAME}:1h .\ndocker push ttl.sh/${IMAGE_NAME}:1h\necho \"Temporary image available at: ttl.sh/${IMAGE_NAME}:1h\"\n</code></pre>     You would then use this ttl.sh image name in your Dask Gateway configuration or Calrissian workflow.</p> </li> </ul> <p>Once the Dask Gateway is available, you can proceed with running the processing module:</p> <ul> <li> <p>Direct Execution: The provided Jupyter Notebook demonstrates how to execute the module directly using its main function.</p> </li> <li> <p>Command-Line Interface (CLI): Alternatively, the module can be executed via its CLI interface, offering a more traditional command-line approach.</p> </li> </ul>"},{"location":"apps/cloudless-mosaic/execute/#calrissian-cwl-execution","title":"Calrissian CWL Execution","text":"<p>This project includes a Common Workflow Language (CWL) workflow for automating the generation of Sentinel-2 monthly mosaics. The workflow leverages a <code>DaskGatewayRequirement</code> extension, enabling CWL runners like Calrissian to optimize parallel processing on a Dask cluster.</p>"},{"location":"apps/cloudless-mosaic/execute/#environment-setup","title":"Environment Setup:","text":"<p>Ensure the environment described in the Distributed Cluster Setup section is established, including the DASK_CLUSTER environment variable.</p>"},{"location":"apps/cloudless-mosaic/execute/#execution-method","title":"Execution Method","text":"<p>The workflow file can be executed using Calrissian in two primary ways:</p> <p>Execute the workflow directly using the calrissian command: <pre><code>calrissian \\\n    --stdout /calrissian/results.json \\\n    --stderr /calrissian/app.log \\\n    --max-ram 16G \\\n    --max-cores \"8\" \\\n    --tmp-outdir-prefix /calrissian/tmp/ \\\n    --outdir /calrissian/results \\\n    --usage-report /calrissian/usage.json \\\n    --tool-logs-basepath /calrissian/logs \\\n    --pod-serviceaccount calrissian-sa \\\n    --dask-gateway-url \"http://traefik-dask-gateway.eoap-dask-gateway.svc.cluster.local:80\" \\\n    https://github.com/eoap/dask-app-package/releases/download/1.0.1/cloudless-mosaic.1.0.1.cwl \\\n    --resolution 100 \\\n    --start-date 2020-01-01 \\\n    --end-date 2020-12-31\n</code></pre></p> <p>For robust and scalable execution, you can submit the workflow as a Kubernetes Job:</p> <p><pre><code>---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: calrissian-mosaic\nspec:\n  ttlSecondsAfterFinished: 60\n  template:\n    spec:\n      serviceAccountName: default\n      securityContext:\n        runAsUser: 0\n        runAsGroup: 0\n      containers:\n        - name: calrissian\n          image: calrissian:0.19.0\n          command: [\"calrissian\"]\n          args:\n            - --debug\n            - --stdout \n            - /calrissian/results.json\n            - --stderr \n            - /calrissian/app.log\n            - --max-ram \n            - 16G\n            - --max-cores \n            - \"8\"\n            - --tmp-outdir-prefix \n            - /calrissian/tmp/ \n            - --outdir\n            - /calrissian/results\n            - --usage-report \n            - /calrissian/usage.json\n            - --tool-logs-basepath \n            - /calrissian/logs\n            - --dask-gateway-url\n            - \"http://traefik-dask-gateway.eoap-dask-gateway.svc.cluster.local:80\"\n            - https://github.com/eoap/dask-app-package/releases/download/1.0.1/cloudless-mosaic.1.0.1.cwl\n            - --resolution\n            - 100\n            - --start-date\n            - \"2020-01-01\"\n            - --end-date \n            - \"2020-12-31\"\n          volumeMounts:\n            - name: calrissian-volume\n              mountPath: /calrissian\n          env:\n            - name: CALRISSIAN_POD_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n      restartPolicy: Never\n      volumes:\n        - name: calrissian-volume\n          persistentVolumeClaim:\n            claimName: calrissian-claim \n  backoffLimit: 3\n</code></pre> Important Note: Ensure you are using a Calrissian image that supports DaskGateway. </p> <p>The latest version can be found here Important Note: Ensure you are using a Calrissian image that supports DaskGateway. The latest version can be found here.</p>"},{"location":"apps/cloudless-mosaic/execute/#direct-calrissian-command","title":"Direct Calrissian Command","text":""},{"location":"apps/cloudless-mosaic/execute/#kubernetes-job-submission","title":"Kubernetes Job Submission","text":""},{"location":"apps/cloudless-mosaic/execute/#input-data","title":"Input Data","text":"<p>The module retrieves Sentinel-2 imagery from the Planetary Computer STAC API based on the specified parameters:</p> <ul> <li>Time Range: Defined by <code>--start-date</code> and <code>--end-date</code>.</li> <li>Area of Interest (AOI): A bounding box (min_lon,min_lat,max_lon,max_lat).</li> <li>Bands: Specific spectral bands to retrieve (e.g., nir, red, green).</li> <li>Collection: The Sentinel-2 collection to use (e.g., sentinel-2-l2a).</li> <li>Max Cloud Cover: Filters images to include only those below a specified cloud cover percentage.</li> <li>Max Items: Limits the maximum number of STAC items to process.</li> </ul>"},{"location":"apps/cloudless-mosaic/execute/#output-data","title":"Output Data","text":"<p>Upon successful execution, the pipeline generates the following outputs:</p> <ul> <li>Cloud-Optimized GeoTIFFs (COGs): Monthly median mosaics are saved as COGs, organized into directories named <code>monthly-mosaic-YYYY-MM</code></li> </ul>"},{"location":"apps/cloudless-mosaic/workflow/","title":"CWL Workflow for cloudless-mosaic module","text":"<pre><code>cwlVersion: v1.2\n\n$namespaces:\n  s: https://schema.org/\n  calrissian: https://calrissian-cwl.github.io/schema#\n\ns:softwareVersion: 1.4.1\nschemas:\n  - http://schema.org/version/9.0/schemaorg-current-http.rdf\n\n$graph:\n- class: Workflow\n  id: main\n  requirements: \n    InlineJavascriptRequirement: {}\n    NetworkAccess:\n      networkAccess: true\n    ScatterFeatureRequirement: {}\n  inputs:\n    start-date:\n      type: string\n      default: \"2020-10-01\"\n    end-date:\n      type: string\n      default: \"2020-12-31\"\n    aoi:\n      type: string\n      default: \"-122.27508544921875,47.54687159892238,-121.96128845214844,47.745787772920934\"\n    bands:\n      type: string[]\n      default: [\"nir\", \"red\", \"green\"]\n    collection:\n      type: string\n      default: \"sentinel-2-l2a\"\n    resolution:\n      type: int\n    max_items: \n      type: int\n      default: 1000\n    max_cloud_cover:\n      type: int\n      default: 25\n  outputs:\n    stac-catalog:\n      outputSource: step_monthly_composite/stac-catalog\n      type: Directory\n  steps:\n    step_monthly_composite:\n      in: \n        start-date: start-date\n        end-date: end-date\n        aoi: aoi\n        bands: bands\n        collection: collection\n        resolution: resolution\n        max_items: max_items\n        max_cloud_cover: max_cloud_cover\n      out: \n      - stac-catalog\n      run:\n        \"#cloudless-mosaic\"\n\n- class: CommandLineTool\n  id: cloudless-mosaic\n  requirements:\n    DockerRequirement: \n      dockerPull: ghcr.io/eoap/dask-app-package/cloudless-mosaic:1.0.0\n    EnvVarRequirement:\n      envDef: {}\n    calrissian:DaskGatewayRequirement:\n      workerCores: 1\n      workerCoresLimit: 1\n      workerMemory: \"2G\"\n      clusterMaxCore: 24\n      clusterMaxMemory: \"48G\"\n\n  baseCommand: [\"cloudless-mosaic\"]\n  arguments: []\n  inputs:\n    start-date:\n      type: string\n      inputBinding:\n        position: 1\n        prefix: \"--start-date\"\n    end-date:\n      type: string\n      inputBinding:\n        position: 1\n        prefix: \"--end-date\"\n    aoi:\n      type: string\n      inputBinding:\n        position: 1\n        prefix: \"--aoi\"\n    bands:\n      type:\n      - \"null\"\n      - type: array\n        items: string\n        inputBinding:\n          prefix: \"--bands\"\n    collection:\n      type: string\n      inputBinding:\n        position: 1\n        prefix: \"--collection\"\n    resolution:\n      type: int\n      inputBinding:\n        position: 1\n        prefix: \"--resolution\"\n    max_items:\n      type: int\n      inputBinding:\n        position: 1\n        prefix: \"--max-items\"\n    max_cloud_cover:\n      type: int\n      inputBinding:\n        position: 1\n        prefix: \"--max-cloud-cover\"\n  outputs:\n    stac-catalog:\n      type: Directory\n      outputBinding:\n        glob: .\n</code></pre>"},{"location":"apps/eopf-sentinel-2/","title":"Sentinel-2 Data Processing Module","text":"<p>This documentation provides an overview of a Python module for processing Sentinel-2 imagery, optimized for efficient execution on distributed infrastructure via Dask Gateway.</p>"},{"location":"apps/eopf-sentinel-2/#overview","title":"Overview","text":"<p>This module is designed to tackle the computational demands of large-scale geospatial data analysis. It achieves scalability and out-of-core processing by synergistically integrating:</p> <ul> <li> <p><code>Xarray</code>: For labeled multi-dimensional array manipulation.</p> </li> <li> <p><code>Dask</code>: Enabling parallel and distributed computation.</p> </li> <li> <p><code>Zarr</code>: Providing cloud-native, chunked array storage for efficient I/O.</p> </li> </ul> <p>The module supports STAC (SpatioTemporal Asset Catalog) compliant datasets through pystac facilitating access to Sentinel-2 data. </p> <p>The core processing pipeline includes robust functionality for:</p> <ul> <li> <p>Vegetation and Water Index Computation: Generating essential indices like NDVI, NDWI, and NBR for environmental monitoring.</p> </li> <li> <p>Color-Balanced Composite Imagery: Producing various composite images (e.g., RGB, CIR, SWIR) for enhanced visualization and analysis.</p> </li> </ul>"},{"location":"apps/eopf-sentinel-2/#key-features-benefits","title":"Key Features &amp; Benefits","text":"<ul> <li> <p>Distributed Processing: Leverages Dask Gateway for scalable execution on Kubernetes clusters, allowing for processing of large Sentinel-2 datasets that exceed single-machine memory limits.</p> </li> <li> <p>CWL Workflow Integration: Includes a Common Workflow Language (CWL) workflow, optimized for distributed execution with a custom <code>DaskGatewayRequirements</code> extension, enabling orchestration via Calrissian.</p> </li> <li> <p>Cloud-Native Data Handling: Utilizes the Zarr format for efficient, chunked data storage, ideal for cloud environments and parallel access.</p> </li> <li> <p>STAC Compliance: Seamlessly integrates with STAC catalogs for data discovery and access.</p> </li> <li> <p>Comprehensive Outputs: Generates a suite of valuable vegetation and water indices, along with various color-corrected composite images and a new STAC item referencing the generated products.</p> </li> </ul>"},{"location":"apps/eopf-sentinel-2/#getting-started","title":"Getting Started","text":"<p>Refer to the Execution Guide for detailed instructions on setting up the distributed cluster, running the module directly or via Calrissian CWL workflows, and understanding input/output data specifications.</p>"},{"location":"apps/eopf-sentinel-2/cli/","title":"Command-Line Interface (CLI)","text":"<p>This module provides a command-line interface for executing the Sentinel-2 processing workflow. Built using the <code>click</code> library, the CLI allows users to easily trigger the processing from their terminal, making it suitable for scripting and integration into automated workflows.</p>"},{"location":"apps/eopf-sentinel-2/cli/#installation","title":"Installation","text":"<p>To enable the command-line entry point and install the necessary dependencies, navigate to the module's root directory and run the following commands: <pre><code>cd eopf-sentinel-2/\npip install -e .\n</code></pre></p> <p>The <code>pip install -e .</code> command installs the package in \"editable\" mode, meaning any changes to the source code will be immediately reflected without needing to reinstall.</p>"},{"location":"apps/eopf-sentinel-2/cli/#environment-variables","title":"Environment Variables","text":"<p>Before running the CLI, ensure that the <code>DASK_CLUSTER</code> environment variable is set to point to your Dask cluster's address. This is crucial for the application to connect to the distributed processing environment.</p>"},{"location":"apps/eopf-sentinel-2/cli/#basic-usage-and-help","title":"Basic Usage and Help","text":"<p>To view the available commands, options, and a comprehensive help message for the eopf-sentinel-2-proc command, execute: <pre><code>eopf-sentinel-2-proc --help\n</code></pre> This will output the following information: <pre><code>Usage: eopf-sentinel-2-proc [OPTIONS]\n\nOptions:\n  --item-url TEXT  STAC Item URL  [required]\n  --help           Show this message and exit.\n</code></pre></p>"},{"location":"apps/eopf-sentinel-2/cli/#running-the-processing-command","title":"Running the Processing Command","text":"<p>To run the processing, use the <code>eopf-sentinel-2-proc</code> command followed by the <code>--item-url</code> option and the URL of your desired Sentinel-2 STAC item: <pre><code>eopf-sentinel-2-proc --item-url \"https://stac.core.eopf.eodc.eu/collections/sentinel-2-l1c/items/S2B_MSIL1C_20250113T103309_N0511_R108_T32TLQ_20250113T122458\"\n</code></pre></p> <p>Explanation of the item-url parameter:</p> <ul> <li><code>--item-url TEXT</code>: This is a required option. It expects a <code>TEXT</code> value which must be a valid URL pointing to a Sentinel-2 STAC Item. This STAC Item provides all the necessary metadata and asset links (expected in Zarr format) for the module to locate and process the Sentinel-2 data.</li> </ul>"},{"location":"apps/eopf-sentinel-2/execute/","title":"Execution Guide","text":"<p>This guide details how to execute the processing module, leveraging Dask for parallel processing in a distributed cluster environment and Calrissian for CWL workflow orchestration.</p>"},{"location":"apps/eopf-sentinel-2/execute/#distributed-cluster-setup","title":"Distributed Cluster Setup","text":"<p>To enable parallel processing with Dask, a Dask Gateway object is required to create a Dask Cluster.</p>"},{"location":"apps/eopf-sentinel-2/execute/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Dask Gateway Deployment: It is assumed that a Dask Gateway is already deployed and accessible. The dev-platform-eoap repository provides a streamlined method for deploying Dask Gateway on Kubernetes, which can then be integrated with a Code-Server for module execution.</p> </li> <li> <p>Dask Worker Image: For Dask to utilize your module's dependencies and code, a custom Docker image for the Dask workers must be built and made accessible to the Kubernetes cluster. This image should contain all the necessary Python packages and your module's code.</p> </li> <li> <p>Building and Providing the Worker Image:   The easiest way to build the worker image for this module is to navigate into the <code>eopf-sentinel-2/</code> directory (where the Dockerfile for  the worker is located) and run a Docker build command:     <pre><code>cd eopf-sentinel-2/\ndocker build -t eopf-sentinel-2-worker:latest .\n</code></pre>     Once built, this image needs to be available to your Kubernetes cluster.</p> </li> <li> <p>Using ttl.sh for Temporary Images: For development or testing, ttl.sh provides an anonymous, ephemeral registry. This allows you to   quickly build and push a temporary, pullable image without authentication, which expires after a set duration (e.g., 1 hour).     <pre><code>IMAGE_NAME=eopf-sentinel-2-worker\ndocker build -t ttl.sh/${IMAGE_NAME}:1h .\ndocker push ttl.sh/${IMAGE_NAME}:1h\necho \"Temporary image available at: ttl.sh/${IMAGE_NAME}:1h\"\n</code></pre>     You would then use this ttl.sh image name in your Dask Gateway configuration or Calrissian workflow.</p> </li> </ul> <p>Once the Dask Gateway is available, you can proceed with running the processing module:</p> <ul> <li> <p>Direct Execution: The provided Jupyter Notebook demonstrates how to execute the module directly using its main function.</p> </li> <li> <p>Command-Line Interface (CLI): Alternatively, the module can be executed via its CLI interface, offering a more traditional command-line approach.</p> </li> </ul>"},{"location":"apps/eopf-sentinel-2/execute/#calrissian-cwl-execution","title":"Calrissian CWL Execution","text":"<p>This module includes a Common Workflow Language (CWL) workflow, optimized for parallel processing on a Dask Cluster. A new CWL extension, <code>DaskGatewayRequirements</code>, has been developed to enable CWL runners like Calrissian to leverage Dask's distributed computing capabilities.</p>"},{"location":"apps/eopf-sentinel-2/execute/#environment-setup","title":"Environment Setup:","text":"<p>Ensure the environment described in the Distributed Cluster Setup section is established.</p>"},{"location":"apps/eopf-sentinel-2/execute/#execution-methods","title":"Execution Methods:","text":"<p>The workflow file can be executed using Calrissian in two primary ways:</p> <p>Execute the workflow directly using the calrissian command: <pre><code>calrissian \\\n    --stdout \\\n    /calrissian/results.json \\\n    --stderr \\\n    /calrissian/app.log \\\n    --max-ram  \\\n    16G \\\n    --max-cores  \\\n    \"8\" \\\n    --tmp-outdir-prefix \\\n    /calrissian/tmp/ \\\n    --outdir \\\n    /calrissian/results \\\n    --usage-report \\\n    /calrissian/usage.json \\\n    --tool-logs-basepath \\\n    /calrissian/logs \\\n    --pod-serviceaccount \\\n    calrissian-sa \\\n    --dask-gateway-url \\\n    \"http://traefik-dask-gateway.eoap-dask-gateway.svc.cluster.local:80\" \\\n    https://github.com/eoap/dask-app-package/releases/download/1.0.1/eopf-sentinel-2.1.0.1.cwl \\\n    --input-url \"https://stac.core.eopf.eodc.eu/collections/sentinel-2-l1c/items/S2B_MSIL1C_20250113T103309_N0511_R108_T32TLQ_20250113T122458\"\n</code></pre> * #### Kubernetes Job Submission</p> <p>For robust and scalable execution, you can submit the workflow as a Kubernetes Job:</p> <p><pre><code>---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: calrissian-sentinel2\nspec:\n  ttlSecondsAfterFinished: 60\n  template:\n    spec:\n      serviceAccountName: default\n      securityContext:\n        runAsUser: 0\n        runAsGroup: 0\n      containers:\n        - name: calrissian\n          image: calrissian:0.19.0\n          command: [\"calrissian\"]\n          args:\n            - --debug\n            - --stdout \n            - /calrissian/results.json\n            - --stderr \n            - /calrissian/app.log\n            - --max-ram \n            - 16G\n            - --max-cores \n            - \"8\"\n            - --tmp-outdir-prefix \n            - /calrissian/tmp/ \n            - --outdir\n            - /calrissian/results\n            - --usage-report \n            - /calrissian/usage.json\n            - --tool-logs-basepath \n            - /calrissian/logs\n            - --dask-gateway-url\n            - \"http://traefik-dask-gateway.eoap-dask-gateway.svc.cluster.local:80\"\n            - https://github.com/eoap/dask-app-package/releases/download/1.0.1/eopf-sentinel-2.1.0.1.cwl\n            - --item-url \n            - \"https://stac.core.eopf.eodc.eu/collections/sentinel-2-l1c/items/S2B_MSIL1C_20250113T103309_N0511_R108_T32TLQ_20250113T122458\"\n          volumeMounts:\n            - name: calrissian-volume\n              mountPath: /calrissian\n          env:\n            - name: CALRISSIAN_POD_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n      restartPolicy: Never\n      volumes:\n        - name: calrissian-volume\n          persistentVolumeClaim:\n            claimName: calrissian-claim \n  backoffLimit: 3\n</code></pre> Important Note: Ensure you are using a Calrissian image that supports DaskGateway. </p> <p>The latest version can be found here</p>"},{"location":"apps/eopf-sentinel-2/execute/#direct-calrissian-command","title":"Direct Calrissian Command","text":""},{"location":"apps/eopf-sentinel-2/execute/#input-data","title":"Input Data","text":"<p>The pipeline is designed to process Sentinel-2 STAC items where the assets are in Zarr format.</p> <p>Example Input URL: <pre><code>https://stac.core.eopf.eodc.eu/collections/sentinel-2-l1c/items/S2B_MSIL1C_20250113T103309_N0511_R108_T32TLQ_20250113T122458\n</code></pre> This example STAC item references data hosted at <code>https://zarr.eopf.copernicus.eu/</code>.</p>"},{"location":"apps/eopf-sentinel-2/execute/#output-data","title":"Output Data","text":"<p>Upon successful execution, the pipeline generates the following outputs:</p> <ul> <li> <p>Common Vegetation and Water Indices (Zarr format):</p> <ul> <li> <p><code>ndvi</code>: Normalized Difference Vegetation Index (NIR, Red)</p> </li> <li> <p><code>ndwi</code>: Normalized Difference Water Index (Green, NIR)</p> </li> <li> <p><code>ndmir</code>: Normalized Difference Moisture Index (SWIR16, SWIR22)</p> </li> <li> <p><code>nbr</code>: Normalized Burn Ratio (NIR, SWIR22)</p> </li> <li> <p><code>ndwi2</code>: (NIR, SWIR16)</p> </li> <li> <p><code>mndwi</code>: Modified Normalized Difference Water Index (Green, SWIR16)</p> </li> <li> <p><code>ndbi</code>: Normalized Difference Built-up Index (SWIR16, NIR)</p> </li> </ul> </li> <li> <p>Various Color-Corrected Composite Images (Zarr format):</p> <ul> <li> <p><code>rgb</code>: Natural Color Composite (Red, Green, Blue)</p> </li> <li> <p><code>vea</code>: Vegetation Analysis Composite (SWIR16, SWIR22, Red)</p> </li> <li> <p><code>civ</code>: Color Infrared Vegetation Composite (NIR, Red, Green)</p> </li> <li> <p><code>law</code>: Land/Water Composite (NIR, SWIR16, Red)</p> </li> <li> <p><code>sir</code>: Shortwave Infrared Composite (SWIR22, NIR, Red)</p> </li> <li> <p><code>fcu</code>: False Color Urban Composite (SWIR22, SWIR16, Red)</p> </li> <li> <p><code>atp</code>: Atmospheric Penetration Composite (SWIR22, SWIR16, NIR)</p> </li> </ul> </li> <li> <p>Newly Created STAC Item: A new STAC item referencing the newly generated products and their assets.</p> </li> </ul>"},{"location":"apps/eopf-sentinel-2/workflow/","title":"CWL Workflow for eopf-sentinel-2 module","text":"<pre><code>cwlVersion: v1.2\n$namespaces:\n  s: https://schema.org/\n  calrissian: https://calrissian-cwl.github.io/schema#\ns:softwareVersion: 1.4.1\nschemas:\n  - http://schema.org/version/9.0/schemaorg-current-http.rdf\n$graph:\n  - class: Workflow\n    id: main\n    requirements:\n      InlineJavascriptRequirement: {}\n      NetworkAccess:\n        networkAccess: true\n      ScatterFeatureRequirement: {}\n    inputs:\n      item-url:\n        type: string\n    outputs:\n      stac-catalog:\n        outputSource: eopf-sentinel-2/stac-catalog\n        type: Directory\n    steps:\n      eopf-sentinel-2:\n        in:\n          item-url: item-url\n        out:\n          - stac-catalog\n        run: \"#eopf-sentinel-2\"\n  - class: CommandLineTool\n    id: eopf-sentinel-2\n    requirements:\n      DockerRequirement:\n        dockerPull: ttl.sh/eopf-sentinel-2:2h@sha256:5372483914e76a3c1fb0c4f36e382be321906276ef8b4a23c1b96f549d360075\n      EnvVarRequirement:\n        envDef: {}\n      calrissian:DaskGatewayRequirement:\n        workerCores: 1\n        workerCoresLimit: 1\n        workerMemory: \"4G\"\n        clusterMaxCore: 5\n        clusterMaxMemory: \"20G\"\n    baseCommand: [\"eopf-sentinel-2-proc\"]\n    arguments: []\n    inputs:\n      item-url:\n        type: string\n        inputBinding:\n          position: 1\n          prefix: \"--item-url\"\n    outputs:\n      stac-catalog:\n        type: Directory\n        outputBinding:\n          glob: .\n</code></pre>"},{"location":"packaging/","title":"Process for packaging a Dask application","text":""},{"location":"packaging/cli/","title":"CLI","text":""},{"location":"packaging/container/","title":"Container","text":""},{"location":"packaging/workflow/","title":"Workflow","text":""}]}